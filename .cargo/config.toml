
# 你可以设置其他的 Cargo 选项
[build]
target = "x86_64-pc-windows-msvc" # 默认构建目标
# jobs = 1          
[target.x86_64-pc-windows-msvc]
rustflags = ["-C", "target-feature=+crt-static"]
# linker = "link.exe"                              # 使用的链接器
# runner = "cmd.exe"                               # 用于运行可执行文件的包装器

# 你可以添加其他目标的配置
[target.x86_64-pc-windows-gnu]
rustflags = ["-C", "target-feature=+crt-static"]
# linker = "gcc"                                   # 使用的链接器
# runner = "cmd.exe"                               # 用于运行可执行文件的包装器

[target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "target-feature=+crt-static"]
# linker = "gcc"                                   # 使用的链接器
# runner = "bash"                                  # 用于运行可执行文件的包装器


[net]
retry = 2                  # 网络重试次数
git-fetch-with-cli = false # 是否使用 `git` 命令来执行 git 操作
offline = false            # 不能访问网络

[cargo-new]
vcs = "none" # 所使用的 VCS  ('git', 'hg', 'pijul', 'fossil', 'none')

[profile.dev]
# 保持最小优化级别以获得更好的编译速度
opt-level = 0
# 启用增量编译
incremental = true
# 增加并行编译单元数
codegen-units = 256
# 禁用一些开发中不太需要的检查来加快编译
debug = 1                # 减少调试信息但仍保留基本信息
debug-assertions = false # 禁用调试断言
overflow-checks = false  # 禁用溢出检查
# 其他优化选项
lto = false      # 禁用链接时优化
panic = 'unwind' # 使用展开而不是中止
rpath = false    # 禁用 rpath
strip = false    # 开发时不剥离符号
# 可选：为特定依赖项设置更高的优化级别
[profile.dev.package."*"]
opt-level = 1 # 为所有依赖使用稍高的优化级别

# 对于一些需要性能的关键依赖，可以单独设置更高的优化级别
[profile.dev.package.regex]
opt-level = 3
[profile.dev.package.sqlx-macros]
opt-level = 3


[profile.release]
# 核心优化设置
opt-level = 3     # 最大性能优化
lto = "fat"       # 完整链接时优化
codegen-units = 1 # 单元最大化优化
panic = 'abort'   # 最小化panic处理
# 完全禁用调试
debug = false
debug-assertions = false
overflow-checks = false
incremental = false
# 二进制优化
strip = "symbols" # 更激进的符号剥离
rpath = false
# 额外的优化设置
[profile.release.package."*"]
opt-level = 3 # 为所有依赖启用最高优化
# 可选：为特定包启用更激进的优化
[profile.release.build-override]
opt-level = 3


[alias]
b = "build"                                                    # 别名 'b' 用于执行 'cargo build'
c = "check"                                                    # 别名 'c' 用于执行 'cargo check'
t = "test"                                                     # 别名 't' 用于执行 'cargo test'
rr = "run --release"                                           # 别名 'rr' 用于执行 'cargo run --release'
rdev = ["run", "--"]
rrdev = ["run", "--release", "--"]


[doc]
browser = "chromium" # `cargo doc --open` 使用的浏览器

# 你可以设置环境变量
[env]
HELLO = "HELLO WORLD" # 自定义环境变量
# ENV_VAR_NAME_3 = { value = "relative/path", relative = true }


# [term]
[term]
verbose = false        # 是否提供详细输出
color = 'auto'         # 是否启用颜色输出
progress.when = 'auto' # 是否显示进度条
progress.width = 80    # 进度条的宽度

# [http]
# debug = false               # HTTP debugging
# proxy = "host:port"         # HTTP 代理，libcurl 格式
# ssl-version = "tlsv1.3"     # TLS version to use
# ssl-version.max = "tlsv1.3" # 最高支持的 TLS 版本
# ssl-version.min = "tlsv1.1" # 最小支持的 TLS 版本
# timeout = 30                # HTTP 请求的超时时间，秒
# low-speed-limit = 10        # 网络超时阈值 (bytes/sec)
# cainfo = "cert.pem"         # path to Certificate Authority (CA) bundle
# check-revoke = true         # check for SSL certificate revocation
# multiplexing = true         # HTTP/2 multiplexing
# user-agent = "…"            # the user-agent header

# [install]
# root = "/some/path"         # `cargo install` 安装到的目标目录

# [patch.<registry>]
# # Same keys as for [patch] in Cargo.toml

# [registries.<name>]  # 设置其它的注册服务： https://course.rs/cargo/reference/specify-deps.html#从其它注册服务引入依赖包
# index = "…"          # 注册服务索引列表的 URL
# token = "…"          # 连接注册服务所需的鉴权 token

# [registry]
# default = "…"        # 默认的注册服务名称: crates.io
# token = "…"

# [source.<name>]      # 注册服务源和替换source definition and replacement
# replace-with = "…"   # 使用给定的 source 来替换当前的 source，例如使用科大源来替换crates.io源以提升国内的下载速度：[source.crates-io] replace-with = 'ustc'
# directory = "…"      # path to a directory source
# registry = "…"       # 注册源的 URL ，例如科大源: [source.ustc] registry = "git://mirrors.ustc.edu.cn/crates.io-index"
# local-registry = "…" # path to a local registry source
# git = "…"            # URL of a git repository source
# branch = "…"         # branch name for the git repository
# tag = "…"            # tag name for the git repository
# rev = "…"            # revision for the git repository

# [target.<triple>]
# linker = "…"           # linker to use
# runner = "…"           # wrapper to run executables
# rustflags = ["…", "…"] # custom flags for `rustc`

# [target.<cfg>]
# runner = "…"           # wrapper to run executables
# rustflags = ["…", "…"] # custom flags for `rustc`

# [target.<triple>.<links>] # `links` build script override
# rustc-link-lib = ["foo"]
# rustc-link-search = ["/path/to/foo"]
# rustc-flags = ["-L", "/some/path"]
# rustc-cfg = ['key="value"']
# rustc-env = {key = "value"}
# rustc-cdylib-link-arg = ["…"]
# metadata_key1 = "value"
# metadata_key2 = "value"
